package dega.gui{	import flash.events.*;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.URLRequest;	import flash.utils.ByteArray;	public class FileManager {		private var fileRef:FileReference;		private var textTypeFilter:FileFilter;		private var imageTypeFilter:FileFilter;		private var allTypes:Array;		private var success:Boolean;		private var ext:String;		public function FileManager () {			fileRef = new FileReference();			fileRef.addEventListener (Event.SELECT,onFileSelected);			fileRef.addEventListener (Event.CANCEL,onCancel);			fileRef.addEventListener (IOErrorEvent.IO_ERROR,onIOError);			fileRef.addEventListener (SecurityErrorEvent.SECURITY_ERROR,onSecurityError);		}		public function browseFile ( type:String = "ALL" ) {						if (type == "TEXT") {				textTypeFilter = new FileFilter("Text Files (*.txt, *.rtf, *.xml)","*.txt;*.rtf;*.xml");				try {					success = fileRef.browse([textTypeFilter]);				} catch (error:Error) {					trace ("Unable to browse for files.");				}			} else if (type == "IMAGE") {				imageTypeFilter = new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)","*.jpg;*.jpeg; *.gif; *.png");				try {					success = fileRef.browse([imageTypeFilter]);				} catch (error:Error) {					trace ("Unable to browse for files.");				}			} else if ( type == "ALL" ) {				textTypeFilter = new FileFilter("Text Files (*.txt, *.rtf, *.xml)","*.txt;*.rtf;*.xml");				imageTypeFilter = new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)","*.jpg;*.jpeg; *.gif; *.png");				allTypes = new Array(imageTypeFilter,textTypeFilter);				fileRef.browse ([allTypes]);				try {					success = fileRef.browse([allTypes]);				} catch (error:Error) {					trace ("Unable to browse for files.");				}			}		}		public function onFileSelected (evt:Event):void {			trace (fileRef.name);			trace (fileRef.creationDate);			trace (fileRef.modificationDate);			trace (fileRef.size);						// si amplío la clase a multiples archivos, debo cambiar esta porcion del codigo			// a un array, para guardar todas las extensiones de los diferentes archivos.			ext = fileRef.name;			ext = ext.slice(ext.length - 3,ext.length);			fileRef.addEventListener (ProgressEvent.PROGRESS,onProgress);			fileRef.addEventListener (Event.COMPLETE,onComplete);			fileRef.load ();		}		public function onProgress (evt:ProgressEvent):void {			trace ("Loaded " + evt.bytesLoaded + " of " + evt.bytesTotal + " bytes.");		}		public function onComplete (evt:Event):void {			trace ("File was successfully loaded.");			trace (fileRef.data);		}		public function onCancel (evt:Event):void {			trace ("The browse request was canceled by the user.");		}		// Save the file with a new Name		public function saveFile ():void {			fileRef.addEventListener (Event.SELECT, onSaveFileSelected);			fileRef.save (fileRef.data,"NewFileName." + ext);		}		public function onSaveFileSelected (evt:Event):void {			fileRef.addEventListener (ProgressEvent.PROGRESS, onSaveProgress);			fileRef.addEventListener (Event.COMPLETE, onSaveComplete);			fileRef.addEventListener (Event.CANCEL, onSaveCancel);		}		public function onSaveProgress (evt:ProgressEvent):void {			trace ("Saved " + evt.bytesLoaded + " of " + evt.bytesTotal + " bytes.");		}		public function onSaveComplete (evt:Event):void {			trace ("File saved.");			fileRef.removeEventListener (Event.SELECT, onSaveFileSelected);			fileRef.removeEventListener (ProgressEvent.PROGRESS, onSaveProgress);			fileRef.removeEventListener (Event.COMPLETE, onSaveComplete);			fileRef.removeEventListener (Event.CANCEL, onSaveCancel);		}		public function onSaveCancel (evt:Event):void {			trace ("The save request was canceled by the user.");		}		// Error Handling and Security Restrictions		public function onIOError (evt:IOErrorEvent):void {			trace ("There was an IO Error." + evt);		}		public function onSecurityError (evt:Event):void {			trace ("There was a security error.");		}		// Upload a file to a server		function uploadFile ():void {						// Cambiar esto a un script PHP						fileRef.addEventListener(Event.COMPLETE, completeHandler);						var request:URLRequest = new URLRequest("http://localhost/~dega/");			try {				fileRef.upload (request);			} catch (error:Error) {				trace ("Unable to upload file.");			}		}						function completeHandler (event:Event):void {			trace ("uploaded");		}	}}