package dega.gui {	import com.greensock.TweenMax;	import com.greensock.easing.Quint;		import dega.assetsManager.FontEmbedding;	import dega.display.text.CustomTLF;		import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.text.engine.RenderingMode;		import flashx.textLayout.formats.TextAlign;
		public class TextForm extends Sprite {		public static const CHANGE:String = "change";				public static const PASSWORD:String = "password";		public static const MULTILINE:String = "multiline";		public static const EMAIL:String = "email";		public static const LINE:String = "line";				private var type:String;		private var bg:Shape;		public var textInput:CustomTLF;		private var colorOnRollOver:uint;		private var colorOnRollOut:uint;		private var currentColor:uint;		private var targetW:Number;		private var targetH:Number;		public var w:Number;		public var h:Number;				private var round:int;		private var min:int;		private var iconValidator:IconValidator;		private var defaultText:String;		private var maxCharacters:int;		public function TextForm ( _defaultText:String = "Type here", _type:String = "Line", _w:int = 200, _h:int = 30, maxChar:int = 15,								   onColor:uint = 0x555555, outColor:uint = 0x888888, colorText:uint = 0xFFFFFF, _round:int = 3 ){			defaultText = _defaultText;			maxCharacters = maxChar;			type = _type;			round = _round;			colorOnRollOver = onColor;			colorOnRollOut = outColor;			currentColor = colorOnRollOut;			min = 200;			w = min;			h = 28;			targetW = w;			targetH = h;						bg = new Shape();			bg.graphics.beginFill (currentColor);			bg.graphics.drawRoundRect (0,0,w + 10, h, round, round);			bg.graphics.endFill ();			bg.scaleX = 0;			addChild (bg);			textInput = type == TextForm.MULTILINE ? 									new CustomTLF ({ x:6, y:7, alpha:0, edit:true, width:w, text:defaultText, embedFont:true, font:FontEmbedding.MEDIUM, renderingMode: RenderingMode.CFF, fontSize:13, kerning:true, leading:20, align:TextAlign.LEFT, color:colorText }) 								  : new CustomTLF ({ maxChar:maxCharacters, x:6, y:7, alpha:0, edit:true, width:w, height:h, text:defaultText, embedFont:true, font:FontEmbedding.MEDIUM, renderingMode: RenderingMode.CFF, fontSize:13, kerning:true, leading:20, align:TextAlign.LEFT, color:colorText });			textInput.alpha = 0;			textInput.addEventListener (FocusEvent.FOCUS_IN,FocusIn);			textInput.addEventListener (FocusEvent.FOCUS_OUT,FocusOut);			addChild (textInput);			bg.height = 20 + 8;						if ( type == TextForm.EMAIL ) {				iconValidator = new IconValidator();				addChild (iconValidator);			}						TweenMax.to( textInput, .5, {delay:.5, alpha:.5, ease:Quint.easeInOut });			TweenMax.to(bg, Math.random() , { scaleX:1, ease:Quint.easeInOut });		}		private function FocusIn (event:FocusEvent):void {			textInput.addEventListener( Event.ENTER_FRAME, onEveryFrame );			TweenMax.to( textInput, .3, { alpha:1, ease:Quint.easeInOut });			currentColor = colorOnRollOut;		}		private function FocusOut (event:FocusEvent):void {						TweenMax.to( textInput, .3, { alpha:.5, ease:Quint.easeInOut });			currentColor = colorOnRollOver;						if ( textInput.text == "" ) {				textInput.text = defaultText;				textInput.alpha = .5;				textInput.render();			}						textInput.removeEventListener( Event.ENTER_FRAME, onEveryFrame );		}		private function onEveryFrame (event:Event):void {						if ( type == MULTILINE ) {				bg.width = textInput.width > min ? textInput.width + 10 : 200 + 10;				bg.height = textInput.height > 28 ? textInput.height + 8 : 28;			}							if ( type == EMAIL ) {				iconValidator.x = bg.x + bg.width + 20;				iconValidator.y = bg.y + 10;				if ( EmailValidator.isValidEmail (textInput.text) ) iconValidator.positive ();				else iconValidator.negative ();			}		}		public function done ():void {			textInput.text="";			if ( iconValidator ) iconValidator.visible = false;			TweenMax.to(bg,  Math.random(), {scaleX:0, ease:Quint.easeInOut, onComplete:function ():void { textInput.visible = false } });		}		public function get text ():String {			return textInput.text;		}				public function set text (s:String):void {			textInput.text = s;		}	}}