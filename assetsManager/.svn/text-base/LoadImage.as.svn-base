package dega.assetsManager {		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLRequest;	import flash.system.LoaderContext;
	public class LoadImage extends Sprite {				public static const ALIGN_CORNER:String = "alignCorner";		public static const ALIGN_CENTER:String = "alignCenter";				private var percent:int;		private var loader:Loader;		private var aling:String;		private var bm:Bitmap;		private var bmd:BitmapData;		private var smooth:Boolean;				private var loaderContext:LoaderContext;		public function LoadImage( _url:String, _aling:String = LoadImage.ALIGN_CORNER, _smooth:Boolean = true ) {						this.aling = _aling;			this.smooth = _smooth;			this.percent = 0;						loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);						loaderContext = new LoaderContext ();			loaderContext.checkPolicyFile = true;						loader.load ( new URLRequest( _url ), loaderContext );					}				private function completeHandler ( event:Event ):void {						bmd = new BitmapData ( loader.width, loader.height );			bmd.draw ( loader );			bm = new Bitmap ( bmd, "auto", true );						if ( aling == LoadImage.ALIGN_CENTER ) {				bm.x = 0 - bm.width * .5;				bm.y = 0 - bm.height * .5;				}						addChild ( bm );						loader.unloadAndStop();			loader = null;			dispatchEvent ( new Event ( Event.COMPLETE ));				}				public function get bitmapData ():BitmapData {			return bmd;		}				public function get percentLoaded ():Number {			return percent;		}		private function ioErrorHandler(event:IOErrorEvent):void {			trace ( event );		}		private function progressHandler( event:ProgressEvent = null ):void {				percent = isNaN( event.bytesLoaded / event.bytesTotal) ? 0 : event.bytesLoaded/event.bytesTotal;			dispatchEvent ( new ProgressEvent ( ProgressEvent.PROGRESS ));		}				public function destroy ():void {						removeChild ( bm );			bm = null;			bmd.dispose();			bmd = null;		}	}}