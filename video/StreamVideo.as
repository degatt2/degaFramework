package dega.video {	import flash.display.Sprite;	import flash.events.*;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	public class StreamVideo extends Sprite {		public static const META_DATA : String = "metaData";		public static var ALIGN_CENTER:String = "alignCenter";		public static var ALIGN_CORNER:String = "alignCorner";		private var w : uint;		private var h : uint;		public var videoWidth : uint;		public var videoHeight : uint;		private var videoFramerate : uint;		private var url : String;		private var connection : NetConnection;		private var stream : NetStream;		private var customClient : Object;		private var video : Video;				public var duration : Number;		public var totalLoaded : Number;		private var soundControl : SoundTransform;		private var isLoop : Boolean;		private var isPlay : Boolean;		private var align:String;		public function StreamVideo (url:String , w:uint = 320, h:uint = 240, _align:String = "alignCorner" ) {						this.w = w;			this.h = h;			this.url = url;			this.align = _align;									customClient = new Object();			connection = new NetConnection();			connection.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);			connection.addEventListener (SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			connection.connect(null);									soundControl = new SoundTransform();		}						private function netStatusHandler (event:NetStatusEvent) : void {			switch (event.info.code) {				case "NetConnection.Connect.Success" :					connectStream();					break;								case "NetStream.Play.StreamNotFound" :					trace ("Unable to locate video: " + url);					break;									case "NetStream.Play.Stop":					playComplete();					break;				}		}						private function connectStream () : void {						stream = new NetStream(connection);			stream.bufferTime = 5;			stream.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);			stream.addEventListener (AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);						video = new Video(w, h);						if ( align == StreamVideo.ALIGN_CENTER ) {				video.x = 0 - video.width * .5;				video.y = 0 - video.height * .5;			}						addChild (video);			video.attachNetStream(stream);			stream.client = customClient;			customClient.onMetaData = onMetaDataHandler;			stream.soundTransform = soundControl;		}						public function setVideoSize ( w:uint=320, h:uint=240 ) : void {			video.width = w;			video.height = h;		}				private function onMetaDataHandler (meta:Object) : void {			duration = meta.duration;			videoWidth = meta.width;			videoHeight = meta.height;			videoFramerate = meta.framerate;						dispatchEvent(new Event( META_DATA ));		}				//		VIDEO CONTROLS				private function playComplete ( ) : void {			if (stream.time >= int(duration) && isLoop) {				stream.seek(0.2);				stream.resume();			}						dispatchEvent ( new Event( Event.COMPLETE )); 		}						public function set loop (b:Boolean) : void {			isLoop = b;		}						public function get loop () : Boolean {			return isLoop;		}		public function start () : void {			stream.play(url);			isPlay = true;		}				public function stop () : void {			stream.close();			isPlay = false;		}				public function play () : void {			stream.resume ();			isPlay = true;		}				public function pause () : void {			stream.pause();			isPlay = false;		}				public function toggle () : void {			stream.togglePause();				isPlay = !isPlay;		}				public function seek (time:int) : void {			stream.seek(time);		}				public function get time () : Number {			return stream.time;		}						public function get totalTime () : Number {			return duration;		}						public function get buffer () : Number {			return stream.bufferLength;		}		public function percentLoaded ( ratio:Number = 1 ) : Number {			var v : Number = (isNaN(stream.bytesLoaded / stream.bytesTotal)) ? 0 : (stream.bytesLoaded/stream.bytesTotal) * ratio;			return v;			dispatchEvent ( new ProgressEvent ( ProgressEvent.PROGRESS ));		}						public function isPlaying () : Boolean {			return isPlay;		}						public function set bufferTime (time:Number) : void {			stream.bufferTime = time;		}						public function get bufferTime () : Number {			return stream.bufferTime;		}				//		DISPLAY OPCTIONS		public function set smoothing (b:Boolean) : void {			video.smoothing = b;		}				//		SOUND CONTROLS				public function set volume (vol:Number) : void {			if ( stream ){ 				soundControl.volume = vol;				stream.soundTransform = soundControl;			}		}				public function get volume ( ) : Number {			return soundControl.volume;		}						public function set pan (pan:Number) : void {			soundControl.pan = pan;			stream.soundTransform = soundControl;		}						public function destroy () : void {			if ( video ) removeChild ( video );			if ( stream ) {				stream.removeEventListener ( NetStatusEvent.NET_STATUS, netStatusHandler );				stream.removeEventListener ( AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler );				stream.close();			}						if ( connection ) {				connection.close();			}			video = null;			stream = null;			customClient = null;			connection = null;		}				//		INFO AND ERRORS EVENTS		public function onCuePoint (cue:Object) : void {			trace ("cuepoint: time=" + cue.time + " name=" + cue.name + " type=" + cue.type);		}		private function securityErrorHandler (event:SecurityErrorEvent) : void {			trace ("securityErrorHandler: " + event);		}		private function asyncErrorHandler (event:AsyncErrorEvent) : void {					trace( event );// ignore AsyncErrorEvent events.		}	}}