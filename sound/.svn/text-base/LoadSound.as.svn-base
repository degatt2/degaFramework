package dega.sound {		import flash.events.*;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	public class LoadSound extends EventDispatcher {				public static const SONG_COMPLETE:String = "songComplete";		public static const INFO:String = "info";		private var song:SoundChannel;		private var request:URLRequest;		private var sound:Sound;		private var position:Number;		private var percent:Number;		private var st:SoundTransform; 		private var isLoop:Boolean = false;				public function LoadSound( url:String, isLoop:Boolean = false ) {			position = 0;			request = new URLRequest( url );						sound = new Sound();			sound.addEventListener ( IOErrorEvent.IO_ERROR, ioErrorHandler );			sound.addEventListener ( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler );			sound.addEventListener ( Event.COMPLETE, completeHandler );			sound.addEventListener ( Event.ID3, id3Handler );			sound.addEventListener ( ProgressEvent.PROGRESS, progressHandler );						sound.load ( request );						st = new SoundTransform();			song = new SoundChannel();			song.soundTransform = st;					}				public function play( ):void {			song = sound.play ( );			song.addEventListener ( Event.SOUND_COMPLETE, soundCompleteListener );		}				public function stop():void {			position = song.position;			song.stop();		}				public function resume():void {			song = sound.play( position);		}				public function get length():Number {			var l:Number = sound.length;			return l;		}				public function get currentPosition ():Number {			return song.position;		}				public function set loop ( _loop:Boolean ):void {			isLoop = _loop;		}				public function set noLoop ( _loop:Boolean ):void {			isLoop = _loop;		}				public function set pan (pan:Number):void {           var st:SoundTransform = new SoundTransform();           st.pan = pan;           song.soundTransform = st;                  }                public function get pan ():Number {          	return song.soundTransform.pan;        }        public function  set volume ( v:Number):void {        	var st:SoundTransform = new SoundTransform();        	st.volume = v;        	song.soundTransform = st;        }                public function get volume ():Number {         	return song.soundTransform.volume;        }				public function percentLoaded ( range:int = 1 ) :Number {			return percent * range;		}				private function soundCompleteListener ( event:Event ):void {			 			if (isLoop) {				position = 0;				song = sound.play( position );			}				else 						dispatchEvent ( new Event ( LoadSound.SONG_COMPLETE ) );					}								private function completeHandler(event:Event):void {			//trace("sonido cargado");		}		private function id3Handler(event:Event):void {			//trace("id3Handler: " + event);		}		private function ioErrorHandler(event:Event):void {			//trace("Problema cargando el sonido" + event);		}				private function securityErrorHandler ( event : SecurityErrorEvent ):void {//			trace ("hello a security error was made");		}		private function progressHandler(event:ProgressEvent):void {			percent = event.bytesLoaded / event.bytesTotal;			if (sound.length > 0)		dispatchEvent( new Event( LoadSound.INFO ) );		}			}}